extern crate stopwatch;

use stopwatch::Stopwatch;

fn list_squared(m: u64, n: u64) -> Vec<(u64, u64)> {
    let sw = Stopwatch::start_new();
    let mut final_vec = Vec::new();
    for i in m..n + 1 {
        let mut sum = 0;
        for x in 1..((i / 2) + 1)
            {
                if i % x == 0 {
                    sum += x * x;
                }
            }
        sum += i * i;
        if (sum as f64).sqrt().fract() == 0.0_f64 {
            final_vec.push((i, sum));
        }
    }
    println!("total took {}ms", sw.elapsed_ms());
    final_vec
}

fn testing(m: u64, n: u64, exp: Vec<(u64, u64)>) -> () {
    assert_eq!(list_squared(m, n), exp)
}

#[test]
fn basics_list_squared() {
    testing(1, 250, vec![(1, 1), (42, 2500), (246, 84100)]);
    testing(1, 250, vec![(1, 1), (42, 2500), (246, 84100)]);
    testing(42, 250, vec![(42, 2500), (246, 84100)]);
    testing(250, 500, vec![(287, 84100)]);
    testing(300, 600, vec![]);
    testing(600, 1500, vec![(728, 722500), (1434, 2856100)]);
    testing(1500, 1800, vec![(1673, 2856100)]);
    testing(1800, 2000, vec![(1880, 4884100)]);
    testing(2000, 2200, vec![]);
    testing(2200, 5000, vec![(4264, 24304900)]);
    testing(5000, 10000, vec![(6237, 45024100), (9799, 96079204), (9855, 113635600)]);

    testing(359, 1331, vec![(728, 722500)]);
    testing(237, 5585, vec![(246, 84100), (287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(502, 3958, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(410, 1858, vec![(728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(486, 3885, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(457, 1268, vec![(728, 722500)]);
    testing(921, 3198, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(207, 2248, vec![(246, 84100), (287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(969, 1567, vec![(1434, 2856100)]);
    testing(928, 1522, vec![(1434, 2856100)]);
    testing(755, 5386, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(242, 5295, vec![(246, 84100), (287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(608, 3022, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(715, 3183, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(600, 1133, vec![(728, 722500)]);
    testing(422, 5076, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(468, 2619, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(622, 5054, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(869, 1456, vec![(1434, 2856100)]);
    testing(717, 4679, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(517, 3273, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(320, 1357, vec![(728, 722500)]);
    testing(806, 4407, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(266, 1842, vec![(287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(373, 5511, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(892, 2982, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(741, 1669, vec![(1434, 2856100)]);
    testing(697, 5997, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(993, 3938, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(658, 3703, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(760, 1307, vec![]);
    testing(379, 4502, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(944, 3793, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(547, 1895, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(550, 1740, vec![(728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(540, 5291, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(785, 5403, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(645, 5425, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(288, 4968, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(363, 2606, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(525, 5839, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(469, 2256, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(225, 3990, vec![(246, 84100), (287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(314, 3868, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(248, 3219, vec![(287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(575, 2794, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(945, 2012, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(382, 3732, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(304, 5612, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);
    testing(945, 5670, vec![(1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900)]);

    testing(513, 1877, vec![(728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(370, 277, vec![]);
    testing(387, 1658, vec![(728, 722500), (1434, 2856100)]);
    testing(605, 303, vec![]);
    testing(562, 1103, vec![(728, 722500)]);
    testing(220, 1041, vec![(246, 84100), (287, 84100), (728, 722500)]);
    testing(758, 437, vec![]);
    testing(399, 1730, vec![(728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(530, 780, vec![(728, 722500)]);
    testing(491, 508, vec![]);
    testing(426, 519, vec![]);
    testing(535, 1442, vec![(728, 722500), (1434, 2856100)]);
    testing(219, 1597, vec![(246, 84100), (287, 84100), (728, 722500), (1434, 2856100)]);
    testing(616, 1752, vec![(728, 722500), (1434, 2856100), (1673, 2856100)]);
    testing(449, 1934, vec![(728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100)]);
    testing(768, 800, vec![]);
    testing(189, 1155, vec![(246, 84100), (287, 84100), (728, 722500)]);
    testing(428, 1156, vec![(728, 722500)]);
    testing(725, 1176, vec![(728, 722500)]);
    testing(332, 343, vec![]);
}